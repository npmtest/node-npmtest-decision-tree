{"/home/travis/build/npmtest/node-npmtest-decision-tree/test.js":"/* istanbul instrument in package npmtest_decision_tree */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-decision-tree/lib.npmtest_decision_tree.js":"/* istanbul instrument in package npmtest_decision_tree */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_decision_tree = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_decision_tree = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-decision-tree/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-decision-tree && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_decision_tree */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_decision_tree\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_decision_tree.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_decision_tree.rollup.js'] =\n            local.assetsDict['/assets.npmtest_decision_tree.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_decision_tree.__dirname + '/lib.npmtest_decision_tree.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-decision-tree/node_modules/decision-tree/lib/decision-tree.js":"var _ = require('lodash');\n\n/**\n * ID3 Decision Tree Algorithm\n * @module DecisionTreeID3\n */\n\nmodule.exports = (function() {\n\n  /**\n   * Map of valid tree node types\n   * @constant\n   * @static\n   */\n  const NODE_TYPES = DecisionTreeID3.NODE_TYPES = {\n    RESULT: 'result',\n    FEATURE: 'feature',\n    FEATURE_VALUE: 'feature_value'\n  };\n\n  /**\n   * Underlying model\n   * @private\n   */\n  var model;\n\n  /**\n   * @constructor\n   * @return {DecisionTreeID3}\n   */\n  function DecisionTreeID3(data, target, features) {\n    this.data = data;\n    this.target = target;\n    this.features = features;\n    model = createTree(data, target, features);\n  }\n\n  /**\n   * @public API\n   */\n  DecisionTreeID3.prototype = {\n\n    /**\n     * Predicts class for sample\n     */\n    predict: function(sample) {\n      var root = model;\n      while (root.type !== NODE_TYPES.RESULT) {\n        var attr = root.name;\n        var sampleVal = sample[attr];\n        var childNode = _.detect(root.vals, function(node) {\n          return node.name == sampleVal\n        });\n        if (childNode){\n          root = childNode.child;\n        } else {\n          root = root.vals[0].child;\n        }\n      }\n\n      return root.val;\n    },\n\n    /**\n     * Evalutes prediction accuracy on samples\n     */\n    evaluate: function(samples) {\n      var instance = this;\n      var target = this.target;\n\n      var total = 0;\n      var correct = 0;\n\n      _.each(samples, function(s) {\n        total++;\n        var pred = instance.predict(s);\n        var actual = s[target];\n        if (pred == actual) {\n          correct++;\n        }\n      });\n\n      return correct / total;\n    },\n\n    /**\n     * Returns JSON representation of trained model\n     */\n    toJSON: function() {\n      return model;\n    }\n  };\n\n  /**\n   * Creates a new tree\n   * @private\n   */\n  function createTree(data, target, features) {\n    var targets = _.unique(_.pluck(data, target));\n    if (targets.length == 1) {\n      return {\n        type: NODE_TYPES.RESULT,\n        val: targets[0],\n        name: targets[0],\n        alias: targets[0] + randomUUID()\n      };\n    }\n\n    if (features.length == 0) {\n      var topTarget = mostCommon(targets);\n      return {\n        type: NODE_TYPES.RESULT,\n        val: topTarget,\n        name: topTarget,\n        alias: topTarget + randomUUID()\n      };\n    }\n\n    var bestFeature = maxGain(data, target, features);\n    var remainingFeatures = _.without(features, bestFeature);\n    var possibleValues = _.unique(_.pluck(data, bestFeature));\n    \n    var node = {\n      name: bestFeature,\n      alias: bestFeature + randomUUID()\n    };\n    \n    node.type = NODE_TYPES.FEATURE;\n    node.vals = _.map(possibleValues, function(v) {\n      var _newS = data.filter(function(x) {\n        return x[bestFeature] == v\n      });\n\n      var child_node = {\n        name: v,\n        alias: v + randomUUID(),\n        type: NODE_TYPES.FEATURE_VALUE\n      };\n\n      child_node.child = createTree(_newS, target, remainingFeatures);\n      return child_node;\n    });\n\n    return node;\n  }\n\n  /**\n   * Computes entropy of a list\n   * @private\n   */\n  function entropy(vals) {\n    var uniqueVals = _.unique(vals);\n    var probs = uniqueVals.map(function(x) {\n      return prob(x, vals)\n    });\n\n    var logVals = probs.map(function(p) {\n      return -p * log2(p)\n    });\n    \n    return logVals.reduce(function(a, b) {\n      return a + b\n    }, 0);\n  }\n\n  /**\n   * Computes gain\n   * @private\n   */\n  function gain(data, target, feature) {\n    var attrVals = _.unique(_.pluck(data, feature));\n    var setEntropy = entropy(_.pluck(data, target));\n    var setSize = _.size(data);\n    \n    var entropies = attrVals.map(function(n) {\n      var subset = data.filter(function(x) {\n        return x[feature] === n\n      });\n\n      return (subset.length / setSize) * entropy(_.pluck(subset, target));\n    });\n\n    var sumOfEntropies = entropies.reduce(function(a, b) {\n      return a + b\n    }, 0);\n    \n    return setEntropy - sumOfEntropies;\n  }\n\n  /**\n   * Computes Max gain across features to determine best split\n   * @private\n   */\n  function maxGain(data, target, features) {\n    return _.max(features, function(element) {\n      return gain(data, target, element)\n    });\n  }\n\n  /**\n   * Computes probability of of a given value existing in a given list\n   * @private\n   */\n  function prob(value, list) {\n    var occurrences = _.filter(list, function(element) {\n      return element === value\n    });\n\n    var numOccurrences = occurrences.length;\n    var numElements = list.length;\n    return numOccurrences / numElements;\n  }\n\n  /**\n   * Computes Log with base-2\n   * @private\n   */\n  function log2(n) {\n    return Math.log(n) / Math.log(2);\n  }\n\n  /**\n   * Finds element with highest occurrence in a list\n   * @private\n   */\n  function mostCommon(list) {\n    var elementFrequencyMap = {};\n    var largestFrequency = -1;\n    var mostCommonElement = null;\n\n    list.forEach(function(element) {\n      var elementFrequency = (elementFrequencyMap[element] || 0) + 1;\n      elementFrequencyMap[element] = elementFrequency;\n\n      if (largestFrequency < elementFrequency) {\n        mostCommonElement = element;\n        largestFrequency = elementFrequency;\n      }\n    });\n\n    return mostCommonElement;\n  }\n\n  /**\n   * Generates random UUID\n   * @private\n   */\n  function randomUUID() {\n    return \"_r\" + Math.random().toString(32).slice(2);\n  }\n\n  /**\n   * @class DecisionTreeID3\n   */\n  return DecisionTreeID3;\n})();\n","/home/travis/build/npmtest/node-npmtest-decision-tree/node_modules/decision-tree/tst/decision-tree.js":"const SAMPLE_DATASET = require('data/sample.json');\nconst SAMPLE_DATASET_CLASS_NAME = 'liked';\n\nvar assert = require('assert');\nvar ID3 = require('lib/decision-tree');\n\ndescribe('ID3 Decision Tree', function() {\n  var dt;\n  before(function() {\n    dt = new ID3(SAMPLE_DATASET.data, SAMPLE_DATASET_CLASS_NAME, SAMPLE_DATASET.features);\n  });\n\n  it('should initialize', function() {\n    assert.ok(dt);\n  });\n\n  it('should train on the dataset', function() {\n    assert.ok(dt.toJSON());\n  });\n\n  it('should predict on a sample instance', function() {\n    var sample = SAMPLE_DATASET.data[0];\n    var predicted_class = dt.predict(sample);\n    var actual_class = sample[SAMPLE_DATASET_CLASS_NAME];\n    assert.equal(predicted_class, actual_class);\n  });\n\n  it('should evaluate perfectly on training dataset', function() {\n    var accuracy = dt.evaluate(SAMPLE_DATASET.data);\n    assert.equal(accuracy, 1);\n  });\n\n  it('should provide access to the underlying model as JSON', function() {\n    var treeModel = dt.toJSON();\n    assert.equal(treeModel.constructor, Object);\n    assert.equal(treeModel.vals.constructor, Array);\n    assert.equal(treeModel.vals.length, 3);\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-decision-tree/node_modules/decision-tree/tst/evaluation.js":"const TIC_TAC_TOE_DATASET = require('data/tic-tac-toe.json');\nconst VOTING_DATASET = require('data/voting.json');\n\nvar assert = require('assert');\nvar ID3 = require('lib/decision-tree');\n\ndescribe('ID3 Decision Tree', function() {\n  describe('Tic Tac Toe Dataset', function() {\n    var dt;\n    before(function() {\n      dt = new ID3(TIC_TAC_TOE_DATASET.data, 'classification', TIC_TAC_TOE_DATASET.features);\n    });\n\n    it('should initialize on training dataset', function() {\n      assert.ok(dt);\n      assert.ok(dt.toJSON());\n    });\n\n    it('should evaluate perfectly on training dataset', function() {\n      var accuracy = dt.evaluate(TIC_TAC_TOE_DATASET.data);\n      assert.equal(accuracy, 1);\n    });\n  });\n\n  describe('Voting Dataset', function() {\n    var dt;\n    before(function() {\n      dt = new ID3(VOTING_DATASET.data, 'classification', VOTING_DATASET.features);\n    });\n\n    it('should initialize on training dataset', function() {\n      assert.ok(dt);\n      assert.ok(dt.toJSON());\n    });\n\n    it('should evaluate perfectly on training dataset', function() {\n      var accuracy = dt.evaluate(VOTING_DATASET.data);\n      assert.equal(accuracy, 1);\n    });\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-decision-tree/node_modules/decision-tree/tst/validation.js":"var assert = require('assert');\nvar ID3 = require('lib/decision-tree');\n\ndescribe('Decision Tree Validation', function() {\n  describe('constructor', function() {\n    describe('feature list', function() {\n      it('should not be NULL', function() {\n        assert.throws(function() {\n          new ID3(\"a\");\n        });\n      });\n\n      it('should not be EMPTY', function() {\n        assert.throws(function() {\n          new ID3(\"a\", []);\n        });\n      });\n\n      it('should be list of strings', function() {\n        assert.throws(function() {\n          new ID3(\"a\", [\"b\", 1]);\n        });\n      });\n    });\n\n    describe('target class', function() {\n      it('should not be NULL', function() {\n        assert.throws(function() {\n          new ID3(null, [\"b\"]);\n        });\n      });\n\n      it('should not be BLANK', function() {\n        assert.throws(function() {\n          new ID3(\" \", [\"b\"]);\n        });\n      });\n\n      it('should not be in feature list', function() {\n        assert.throws(function() {\n          new ID3(\"a\", [\"a\", \"b\"]);\n        });\n      });\n    });\n  });\n\n  describe('training', function() {\n    describe('sample data-set', function() {\n      var dt;\n      beforeEach(function() {\n        dt = new ID3(\"a\", [\"b\"]);\n      });\n\n      it('should be a List<Map<String, Primitive>>', function() {\n        assert.doesNotThrow(function() {\n          dt.train([{a:1,b:'x',c:new Date,d:true}]);\n        });\n\n        assert.throws(function() {\n          dt.train([{a:1,b:[1,2]},{a:3,b:1}]);\n        });\n\n        assert.throws(function() {\n          dt.train([{a:1,b:{a:1,b:2}},{a:3,b:1}]);\n        });\n      });\n\n      it('should not be missing the target-class', function() {\n        assert.doesNotThrow(function() {\n          dt.train([{a:1,b:\"x\",c:50}, {b:\"y\",c:10}]);\n        });\n      });\n\n      it('should not have missing features', function() {\n        assert.doesNotThrow(function() {\n          new ID3(\"a\", [\"d\"])\n            .train([{a:1,b:\"x\",c:50}, {b:\"y\",c:10}]);\n        });\n      });\n    });\n  });\n\n  describe('prediction', function() {\n    describe('sample to predict on', function() {\n      const SAMPLE_DATA_SET = require('data/sample.json');\n      const SAMPLE_DATASET_CLASS_NAME = 'liked';\n\n      it('should not contain untrained features', function() {\n        assert.throws(function() {\n          var dt = new ID3(SAMPLE_DATASET_CLASS_NAME, SAMPLE_DATA_SET.featureList)\n          dt.train(SAMPLE_DATA_SET.data);\n          dt.predict({ non_existent_feature: \"non-existent feature\" });\n        });\n      });\n\n      it('should not contain feature with unseen values', function() {\n        assert.throws(function() {\n          var dt = new ID3(SAMPLE_DATASET_CLASS_NAME, SAMPLE_DATA_SET.featureList, { verbose: true });\n          dt.train(SAMPLE_DATA_SET.data);\n          dt.predict({ color: \"green\", shape: \"square\" });\n        });\n      });\n    });\n  });\n});\n"}